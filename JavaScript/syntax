1. To define a FUNCTION
    var functionName = function (arguments) {
        // {function body..}
    }
    // Literally it means that I save TEXT of the anonymous function into a variable called functionName
    // So, if right after its definition we call it (e.g. {..}() ), then this variable will only contain result of this function call, not its TEXT
    // To save this function as a text
    var copy = functionName;
    // To save the RESULT of this function call (brackets tell it to be called! )
    var save = functionName(arguments);

2. To define a CLASS
    function someClass(prop1,prop2,propN) {
        this.prop1   = prop1;
        this.prop2   = prop2;
        this.propN   = propN;
        this.setProp = function(newProp) {
          this.propN = newProp;
        };
        // Private attribute
        var privateAttr = true;
        // It is possible to return this private paprameter by means of a public function
        this.unprivate = function() {
          return privateAttr;
        };
        var functionName = function(args) {
            //functionBody
        };
        function className(args) {
            this.args = args;
        }
    };
    // From now on it is possible to create objects based upon someClass "template"
    var c = new someClass('AA', 23, true);
    c.setProp(false);

3. Check error stacktrace
  console.log((new Error()).stack)

4. Instead of using multistring things like:
  var f = function(a) {return [0, a, 2*a]};
  var t = f(1);
  var result = t[2];  // 2

  // it is possible to use a shortcut, in this case:
  var result = function(a) { return [0,a,2*a] }(1)[2];

5. Construction try->catch->finally
  try {
    // {Code to be checked for exceptions (syn. success)}
  }   catch   (error) {
    // {Code to be executed if there are some (syn. error)}
    throw error;    // Throw an exception (usually to the console)
  }   finally {
    // {Code to be executed anyway (syn. to callback)}
    console.log('finished');
  }

6. Common functions for undefined number of arguments may be got with {arguments} object
  function sum() {
    var res = 0;
    for (var i = 0; i < arguments.length; i++) {
      res += arguments[i];
    }
    return res;
  }
  console.log(sum(3, 4));             // 7
  console.log(sum(3, 4, 5));          // 12
  console.log(sum(3, 4, 5, 7, 9));    // 28

7. Recursion in functions may be got with {arguments.callee} object
  var factorial = function(step, res) {
    res = res || 1;
    if (step < 2) {
      return res;
    }
    return arguments.callee(step - 1, step * res);
  };
  console.log(factorial(5));          // 120

8. Closures are used for inner functions to have access to outer functions variables
  var uniqueId = function() {
    var id = 0;
    return function() { return id++; };
  }();
  var aValue = uniqueId();
  var anotherValue = uniqueId();

9. Closure for only-here usage
  var getConstant = function() {
    var constants = {                         // With this method
      UPPER_BOUND: 100,                       // all these constants
      LOWER_BOUND: -100                       // are no longer accessible
    };                                        // from anywhere
    return function(constantName) {           // except this function itself!
      return constants[constantName];
    };
  }();                                        // Here it is called right after creation
  alert(getConstant("LOWER_BOUND")); // -100

10. Currying example (many arguments->each argument)
  var multNumber = function(arg) {
    return function(mul) {
      return arg * mul;
    };
  };
  var multFive = multNumber(5);
  console.log(multFive(7));           //35

11. Bubbling
  // By default, all events are worked out in order from the inner element to its highest parent.
  // This may be omitted with the next construction:
  document.getElementById('uniqueId').addEventListener('click', function(event)   {
    event.stopPropagation ? event.stopPropagation() : (event.cancelBubble = true);  // For cross-browser applications
  };

12. Default behavior
  // Default behavior of the browser may be omitted with this:
  document.getElementById('uniqueId').addEventListener('click', function(event)   {
    event.preventDefault ? event.preventDefault() : (event.returnValue = false); // For cross-browser applications
  };
